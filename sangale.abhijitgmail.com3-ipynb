{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment no -3 kNN Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Donorchoose"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### <p>\n",
    "DonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n",
    "</p>\n",
    "<p>\n",
    "    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n",
    "<ul>\n",
    "<li>\n",
    "    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible</li>\n",
    "    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers</li>\n",
    "    <li>How to focus volunteer time on the applications that need the most assistance</li>\n",
    "    </ul>\n",
    "</p>    \n",
    "<p>\n",
    "The goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n",
    "</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## About the DonorsChoose Data Set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### The `train.csv` data set provided by DonorsChoose contains the following features:\n",
    "\n",
    "Feature | Description \n",
    "----------|---------------\n",
    "**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n",
    "**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!</code></li><li><code>First Grade Fun</code></li></ul> \n",
    "**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br/><ul><li><code>Grades PreK-2</code></li><li><code>Grades 3-5</code></li><li><code>Grades 6-8</code></li><li><code>Grades 9-12</code></li></ul>  \n",
    " **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br/><ul><li><code>Applied Learning</code></li><li><code>Care &amp; Hunger</code></li><li><code>Health &amp; Sports</code></li><li><code>History &amp; Civics</code></li><li><code>Literacy &amp; Language</code></li><li><code>Math &amp; Science</code></li><li><code>Music &amp; The Arts</code></li><li><code>Special Needs</code></li><li><code>Warmth</code></li></ul><br/> **Examples:** <br/><ul><li><code>Music &amp; The Arts</code></li><li><code>Literacy &amp; Language, Math &amp; Science</code></li>  \n",
    "  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https://en.wikipedia.org/wiki/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n",
    "**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br/><ul><li><code>Literacy</code></li><li><code>Literature &amp; Writing, Social Sciences</code></li></ul> \n",
    "**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br/><ul><li><code>My students need hands on literacy materials to manage sensory needs!</code</li></ul> \n",
    "**`project_essay_1`**    | First application essay<sup>*</sup>  \n",
    "**`project_essay_2`**    | Second application essay<sup>*</sup> \n",
    "**`project_essay_3`**    | Third application essay<sup>*</sup> \n",
    "**`project_essay_4`**    | Fourth application essay<sup>*</sup> \n",
    "**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n",
    "**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n",
    "**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br/><ul><li><code>nan</code></li><li><code>Dr.</code></li><li><code>Mr.</code></li><li><code>Mrs.</code></li><li><code>Ms.</code></li><li><code>Teacher.</code></li></ul>  \n",
    "**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n",
    "\n",
    "<sup>*</sup> See the section <b>Notes on the Essay Data</b> for more details about these features.\n",
    "\n",
    "Additionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n",
    "\n",
    "Feature | Description \n",
    "----------|---------------\n",
    "**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n",
    "**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n",
    "**`quantity`** | Quantity of the resource required. **Example:** `3`   \n",
    "**`price`** | Price of the resource required. **Example:** `9.95`   \n",
    "\n",
    "**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n",
    "\n",
    "The data set contains the following label (the value you will attempt to predict):\n",
    "\n",
    "Label | Description\n",
    "----------|---------------\n",
    "`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Notes on the Essay Data\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<ul>\n",
    "Prior to May 17, 2016, the prompts for the essays were as follows:\n",
    "<li>__project_essay_1:__ \"Introduce us to your classroom\"</li>\n",
    "<li>__project_essay_2:__ \"Tell us more about your students\"</li>\n",
    "<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"</li>\n",
    "<li>__project_essay_3:__ \"Close by sharing why your project will make a difference\"</li>\n",
    "</ul>\n",
    "\n",
    "\n",
    "<ul>\n",
    "Starting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n",
    "<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"</li>\n",
    "<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"</li>\n",
    "<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    " \n",
    "1. Preprocess essays and titles.\n",
    "2. Split the dataset.\n",
    "3. Vectorize seperately as per the split.\n",
    "standardize data\n",
    "4. Applyig knn\n",
    "\n",
    "Intially all the text preprocessing has to be performed on the whole dataset and then we have to split the dataset into train, Cv and test datasets. After that we have to apply featurization techniques and then perform Cross validtion and build the models.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Objective\n",
    "The primary objective is to implement the k-Nearest Neighbor Algorithm on the DonorChoose Dataset and measure the accuracy on the Test dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import data and modules\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import sqlite3\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "import string\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "\n",
    "import re\n",
    "# Tutorial about Python regular expressions: https://pymotw.com/2/re/\n",
    "import string\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "import pickle\n",
    "\n",
    "from tqdm import tqdm\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import sqlite3\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "import string\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "\n",
    "import re\n",
    "# Tutorial about Python regular expressions: https://pymotw.com/2/re/\n",
    "import string\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "import pickle\n",
    "\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "\n",
    "import chart_studio.plotly as py\n",
    "from collections import Counter\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 Reading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading the DonorsChoose training data into a DataFrame\n",
    "#we are loading two datas in pandas dataframe\n",
    "#NOTE: Only 25000 datapoints are considered as ROC and AUC curve takes lot of time to plot and Due to computational constraints!\n",
    "project_data = pd.read_csv(r'C:\\Users\\SAI\\Downloads\\Assignment_donorchoose 2018\\train_data.csv',nrows=25000)\n",
    "resource_data = pd.read_csv(r'C:\\Users\\SAI\\Downloads\\Assignment_donorchoose 2018\\resources.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train data (25000, 17)\n",
      "--------------------------------------------------\n",
      "The attributes of data : ['Unnamed: 0' 'id' 'teacher_id' 'teacher_prefix' 'school_state'\n",
      " 'project_submitted_datetime' 'project_grade_category'\n",
      " 'project_subject_categories' 'project_subject_subcategories'\n",
      " 'project_title' 'project_essay_1' 'project_essay_2' 'project_essay_3'\n",
      " 'project_essay_4' 'project_resource_summary'\n",
      " 'teacher_number_of_previously_posted_projects' 'project_is_approved']\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of data points in train data\", project_data.shape)\n",
    "print('-'*50)\n",
    "print(\"The attributes of data :\", project_data.columns.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### observation\n",
    "here we have 25000 projects and 17 different attributes i.e.'teacher_id' 'teacher_prefix' 'school_state''project_submitted_datetime' 'project_grade_category' and others"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>teacher_id</th>\n",
       "      <th>teacher_prefix</th>\n",
       "      <th>school_state</th>\n",
       "      <th>Date</th>\n",
       "      <th>project_grade_category</th>\n",
       "      <th>project_subject_categories</th>\n",
       "      <th>project_subject_subcategories</th>\n",
       "      <th>project_title</th>\n",
       "      <th>project_essay_1</th>\n",
       "      <th>project_essay_2</th>\n",
       "      <th>project_essay_3</th>\n",
       "      <th>project_essay_4</th>\n",
       "      <th>project_resource_summary</th>\n",
       "      <th>teacher_number_of_previously_posted_projects</th>\n",
       "      <th>project_is_approved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>473</th>\n",
       "      <td>100660</td>\n",
       "      <td>p234804</td>\n",
       "      <td>cbc0e38f522143b86d372f8b43d4cff3</td>\n",
       "      <td>Mrs.</td>\n",
       "      <td>GA</td>\n",
       "      <td>2016-04-27 00:53:00</td>\n",
       "      <td>Grades PreK-2</td>\n",
       "      <td>Applied Learning</td>\n",
       "      <td>Early Development</td>\n",
       "      <td>Flexible Seating for Flexible Learning</td>\n",
       "      <td>I recently read an article about giving studen...</td>\n",
       "      <td>I teach at a low-income (Title 1) school. Ever...</td>\n",
       "      <td>We need a classroom rug that we can use as a c...</td>\n",
       "      <td>Benjamin Franklin once said, \\\"Tell me and I f...</td>\n",
       "      <td>My students need flexible seating in the class...</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23374</th>\n",
       "      <td>72317</td>\n",
       "      <td>p087808</td>\n",
       "      <td>598621c141cda5fb184ee7e8ccdd3fcc</td>\n",
       "      <td>Ms.</td>\n",
       "      <td>CA</td>\n",
       "      <td>2016-04-27 02:04:15</td>\n",
       "      <td>Grades PreK-2</td>\n",
       "      <td>Literacy &amp; Language</td>\n",
       "      <td>ESL, Literacy</td>\n",
       "      <td>iPad for Learners</td>\n",
       "      <td>Never has society so rapidly changed. Technolo...</td>\n",
       "      <td>Our Language Arts and Social Justice Magnet Sc...</td>\n",
       "      <td>\\\"Is it my turn, Ms. K? When am I going to be ...</td>\n",
       "      <td>By donating to this project, you will give my ...</td>\n",
       "      <td>My students need 1 ipad mini.</td>\n",
       "      <td>127</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0       id                        teacher_id teacher_prefix  \\\n",
       "473        100660  p234804  cbc0e38f522143b86d372f8b43d4cff3           Mrs.   \n",
       "23374       72317  p087808  598621c141cda5fb184ee7e8ccdd3fcc            Ms.   \n",
       "\n",
       "      school_state                Date project_grade_category  \\\n",
       "473             GA 2016-04-27 00:53:00          Grades PreK-2   \n",
       "23374           CA 2016-04-27 02:04:15          Grades PreK-2   \n",
       "\n",
       "      project_subject_categories project_subject_subcategories  \\\n",
       "473             Applied Learning             Early Development   \n",
       "23374        Literacy & Language                 ESL, Literacy   \n",
       "\n",
       "                                project_title  \\\n",
       "473    Flexible Seating for Flexible Learning   \n",
       "23374                       iPad for Learners   \n",
       "\n",
       "                                         project_essay_1  \\\n",
       "473    I recently read an article about giving studen...   \n",
       "23374  Never has society so rapidly changed. Technolo...   \n",
       "\n",
       "                                         project_essay_2  \\\n",
       "473    I teach at a low-income (Title 1) school. Ever...   \n",
       "23374  Our Language Arts and Social Justice Magnet Sc...   \n",
       "\n",
       "                                         project_essay_3  \\\n",
       "473    We need a classroom rug that we can use as a c...   \n",
       "23374  \\\"Is it my turn, Ms. K? When am I going to be ...   \n",
       "\n",
       "                                         project_essay_4  \\\n",
       "473    Benjamin Franklin once said, \\\"Tell me and I f...   \n",
       "23374  By donating to this project, you will give my ...   \n",
       "\n",
       "                                project_resource_summary  \\\n",
       "473    My students need flexible seating in the class...   \n",
       "23374                      My students need 1 ipad mini.   \n",
       "\n",
       "       teacher_number_of_previously_posted_projects  project_is_approved  \n",
       "473                                               2                    1  \n",
       "23374                                           127                    1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# how to replace elements in list python: https://stackoverflow.com/a/2582163/4084039\n",
    "cols = ['Date' if x=='project_submitted_datetime' else x for x in list(project_data.columns)]\n",
    "\n",
    "\n",
    "#sort dataframe based on time pandas python: https://stackoverflow.com/a/49702492/4084039\n",
    "project_data['Date'] = pd.to_datetime(project_data['project_submitted_datetime'])\n",
    "project_data.drop('project_submitted_datetime', axis=1, inplace=True)\n",
    "project_data.sort_values(by=['Date'], inplace=True)\n",
    "\n",
    "\n",
    "# how to reorder columns pandas python: https://stackoverflow.com/a/13148611/4084039\n",
    "project_data = project_data[cols]\n",
    "\n",
    "\n",
    "project_data.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train data (1541272, 4)\n",
      "['id' 'description' 'quantity' 'price']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>description</th>\n",
       "      <th>quantity</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>p233245</td>\n",
       "      <td>LC652 - Lakeshore Double-Space Mobile Drying Rack</td>\n",
       "      <td>1</td>\n",
       "      <td>149.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>p069063</td>\n",
       "      <td>Bouncy Bands for Desks (Blue support pipes)</td>\n",
       "      <td>3</td>\n",
       "      <td>14.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id                                        description  quantity  \\\n",
       "0  p233245  LC652 - Lakeshore Double-Space Mobile Drying Rack         1   \n",
       "1  p069063        Bouncy Bands for Desks (Blue support pipes)         3   \n",
       "\n",
       "    price  \n",
       "0  149.00  \n",
       "1   14.95  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Number of data points in train data\", resource_data.shape)\n",
    "print(resource_data.columns.values)\n",
    "resource_data.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Observation\n",
    "Here we can see the there are 1541272 resources whicih more than no of projects also \n",
    "there are 4 columns of resorces 'id' 'description' 'quantity' 'price'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2 preprocessing of 'project_subject_categories'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "catogories = list(project_data['project_subject_categories'].values)\n",
    "# remove special characters from list of strings python: https://stackoverflow.com/a/47301924/4084039\n",
    "\n",
    "# https://www.geeksforgeeks.org/removing-stop-words-nltk-python/\n",
    "# https://stackoverflow.com/questions/23669024/how-to-strip-a-specific-word-from-a-string\n",
    "# https://stackoverflow.com/questions/8270092/remove-all-whitespace-in-a-string-in-python\n",
    "cat_list = []\n",
    "for i in catogories:\n",
    "    temp = \"\"\n",
    "    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n",
    "    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n",
    "        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n",
    "            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n",
    "        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n",
    "        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n",
    "        temp = temp.replace('&','_') # we are replacing the & value into \n",
    "    cat_list.append(temp.strip())\n",
    "    \n",
    "project_data['clean_categories'] = cat_list\n",
    "project_data.drop(['project_subject_categories'], axis=1, inplace=True)\n",
    "\n",
    "from collections import Counter\n",
    "my_counter = Counter()\n",
    "for word in project_data['clean_categories'].values:\n",
    "    my_counter.update(word.split())\n",
    "\n",
    "cat_dict = dict(my_counter)\n",
    "sorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.3 Preprocessing of Project_Subject_Subcategories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub_catogories = list(project_data['project_subject_subcategories'].values)\n",
    "# remove special characters from list of strings python: https://stackoverflow.com/a/47301924/4084039\n",
    "\n",
    "# https://www.geeksforgeeks.org/removing-stop-words-nltk-python/\n",
    "# https://stackoverflow.com/questions/23669024/how-to-strip-a-specific-word-from-a-string\n",
    "# https://stackoverflow.com/questions/8270092/remove-all-whitespace-in-a-string-in-python\n",
    "\n",
    "sub_subcat_list = []\n",
    "for i in sub_catogories:\n",
    "    temp = \"\"\n",
    "    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n",
    "    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n",
    "        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n",
    "            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n",
    "        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n",
    "        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n",
    "        temp = temp.replace('&','_')\n",
    "    sub_subcat_list.append(temp.strip())\n",
    "\n",
    "project_data['clean_subcategories'] = sub_subcat_list\n",
    "project_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\n",
    "\n",
    "# count of all the words in corpus python: https://stackoverflow.com/a/22898595/4084039\n",
    "my_counter = Counter()\n",
    "for word in project_data['clean_subcategories'].values:\n",
    "    my_counter.update(word.split())\n",
    "    \n",
    "sub_subcat_dict = dict(my_counter)\n",
    "sorted_sub_subcat_dict = dict(sorted(sub_subcat_dict.items(), key=lambda kv: kv[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.4 preprocessing of teacher_prefix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After removing the special characters ,Column values:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['Mr', 'Mrs', 'Ms', 'Teacher'], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##NaN values in techer prefix will create a problem while One Hot encoding,so we replace NaN values with the mode of that particular column\n",
    "###removing dot(.) since it is a special character\n",
    "####https://www.geeksforgeeks.org/python-pandas-dataframe-fillna-to-replace-null-values-in-dataframe/\n",
    "\n",
    "mode_of_teacher_prefix = project_data['teacher_prefix'].value_counts().index[0]\n",
    "project_data['teacher_prefix'] = project_data['teacher_prefix'].fillna(mode_of_teacher_prefix)\n",
    "project_data['teacher_prefix'] = project_data['teacher_prefix'].fillna(mode_of_teacher_prefix)\n",
    "\n",
    "\n",
    "prefixes = []\n",
    "for i in range(len(project_data)):\n",
    "    a = project_data[\"teacher_prefix\"][i].replace(\".\", \"\")\n",
    "    prefixes.append(a)\n",
    "    \n",
    "project_data.drop(['teacher_prefix'], axis = 1, inplace = True)\n",
    "project_data[\"teacher_prefix\"] = prefixes\n",
    "print(\"After removing the special characters ,Column values:\")\n",
    "np.unique(project_data[\"teacher_prefix\"].values)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After removing the special characters ,Column values:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['Grades_3_5', 'Grades_6_8', 'Grades_9_12', 'Grades_PreK_2'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We need to get rid of The spaces between the text and the hyphens because they're special characters.\n",
    "#Removing multiple characters from a string in Python\n",
    "#https://stackoverflow.com/questions/3411771/multiple-character-replace-with-python\n",
    "project_grade_category = []\n",
    "for i in range(len(project_data)):\n",
    "    a = project_data[\"project_grade_category\"][i].replace(\" \", \"_\").replace(\"-\", \"_\")\n",
    "    project_grade_category.append(a)\n",
    "    \n",
    "project_data.drop(['project_grade_category'], axis = 1, inplace = True)\n",
    "project_data[\"project_grade_category\"] = project_grade_category\n",
    "print(\"After removing the special characters ,Column values:\")\n",
    "np.unique(project_data[\"project_grade_category\"].values)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.5 Text preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge two column text dataframe:\n",
    "project_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n",
    "                        project_data[\"project_essay_2\"].map(str) + \\\n",
    "                        project_data[\"project_essay_3\"].map(str) + \\\n",
    "                        project_data[\"project_essay_4\"].map(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>teacher_id</th>\n",
       "      <th>school_state</th>\n",
       "      <th>Date</th>\n",
       "      <th>project_title</th>\n",
       "      <th>project_essay_1</th>\n",
       "      <th>project_essay_2</th>\n",
       "      <th>project_essay_3</th>\n",
       "      <th>project_essay_4</th>\n",
       "      <th>project_resource_summary</th>\n",
       "      <th>teacher_number_of_previously_posted_projects</th>\n",
       "      <th>project_is_approved</th>\n",
       "      <th>clean_categories</th>\n",
       "      <th>clean_subcategories</th>\n",
       "      <th>teacher_prefix</th>\n",
       "      <th>project_grade_category</th>\n",
       "      <th>essay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>473</th>\n",
       "      <td>100660</td>\n",
       "      <td>p234804</td>\n",
       "      <td>cbc0e38f522143b86d372f8b43d4cff3</td>\n",
       "      <td>GA</td>\n",
       "      <td>2016-04-27 00:53:00</td>\n",
       "      <td>Flexible Seating for Flexible Learning</td>\n",
       "      <td>I recently read an article about giving studen...</td>\n",
       "      <td>I teach at a low-income (Title 1) school. Ever...</td>\n",
       "      <td>We need a classroom rug that we can use as a c...</td>\n",
       "      <td>Benjamin Franklin once said, \\\"Tell me and I f...</td>\n",
       "      <td>My students need flexible seating in the class...</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>AppliedLearning</td>\n",
       "      <td>EarlyDevelopment</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>Grades_PreK_2</td>\n",
       "      <td>I recently read an article about giving studen...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23374</th>\n",
       "      <td>72317</td>\n",
       "      <td>p087808</td>\n",
       "      <td>598621c141cda5fb184ee7e8ccdd3fcc</td>\n",
       "      <td>CA</td>\n",
       "      <td>2016-04-27 02:04:15</td>\n",
       "      <td>iPad for Learners</td>\n",
       "      <td>Never has society so rapidly changed. Technolo...</td>\n",
       "      <td>Our Language Arts and Social Justice Magnet Sc...</td>\n",
       "      <td>\\\"Is it my turn, Ms. K? When am I going to be ...</td>\n",
       "      <td>By donating to this project, you will give my ...</td>\n",
       "      <td>My students need 1 ipad mini.</td>\n",
       "      <td>127</td>\n",
       "      <td>1</td>\n",
       "      <td>Literacy_Language</td>\n",
       "      <td>ESL Literacy</td>\n",
       "      <td>Mr</td>\n",
       "      <td>Grades_6_8</td>\n",
       "      <td>Never has society so rapidly changed. Technolo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7176</th>\n",
       "      <td>79341</td>\n",
       "      <td>p091436</td>\n",
       "      <td>bb2599c4a114d211b3381abe9f899bf8</td>\n",
       "      <td>OH</td>\n",
       "      <td>2016-04-27 07:24:47</td>\n",
       "      <td>Robots are Taking over 2nd Grade</td>\n",
       "      <td>Computer coding and robotics, my second grader...</td>\n",
       "      <td>We are a small, rural school in Northwest Ohio...</td>\n",
       "      <td>We have a new technology teacher to our distri...</td>\n",
       "      <td>You can help this dream of ours become a reali...</td>\n",
       "      <td>My students need a robot mouse STEM activity s...</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "      <td>Math_Science AppliedLearning</td>\n",
       "      <td>AppliedSciences EarlyDevelopment</td>\n",
       "      <td>Ms</td>\n",
       "      <td>Grades_6_8</td>\n",
       "      <td>Computer coding and robotics, my second grader...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5145</th>\n",
       "      <td>50256</td>\n",
       "      <td>p203475</td>\n",
       "      <td>63e9a9f2c9811a247f1aa32ee6f92644</td>\n",
       "      <td>CA</td>\n",
       "      <td>2016-04-27 08:45:34</td>\n",
       "      <td>Books to Power Powerful Book Clubs!</td>\n",
       "      <td>Do you remember the book you read that made yo...</td>\n",
       "      <td>My students are part of an exciting adventure....</td>\n",
       "      <td>We are fortunate enough to be a \\\"project scho...</td>\n",
       "      <td>As a new teacher my book shelves are bare or t...</td>\n",
       "      <td>My students need books to help support their h...</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Literacy_Language</td>\n",
       "      <td>Literacy</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>Grades_PreK_2</td>\n",
       "      <td>Do you remember the book you read that made yo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2521</th>\n",
       "      <td>164738</td>\n",
       "      <td>p248458</td>\n",
       "      <td>40da977f63fb3d85589a063471304b11</td>\n",
       "      <td>NJ</td>\n",
       "      <td>2016-04-27 09:33:03</td>\n",
       "      <td>Supplies to Support my Struggling Readers!!</td>\n",
       "      <td>My students are all struggling readers. I supp...</td>\n",
       "      <td>My students live in a lower income area in Cen...</td>\n",
       "      <td>The materials I am requesting will be used dur...</td>\n",
       "      <td>Imagine not being able to read the text you ar...</td>\n",
       "      <td>My students need phonics and reading comprehen...</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>Literacy_Language</td>\n",
       "      <td>Literacy Literature_Writing</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>Grades_PreK_2</td>\n",
       "      <td>My students are all struggling readers. I supp...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0       id                        teacher_id school_state  \\\n",
       "473        100660  p234804  cbc0e38f522143b86d372f8b43d4cff3           GA   \n",
       "23374       72317  p087808  598621c141cda5fb184ee7e8ccdd3fcc           CA   \n",
       "7176        79341  p091436  bb2599c4a114d211b3381abe9f899bf8           OH   \n",
       "5145        50256  p203475  63e9a9f2c9811a247f1aa32ee6f92644           CA   \n",
       "2521       164738  p248458  40da977f63fb3d85589a063471304b11           NJ   \n",
       "\n",
       "                     Date                                project_title  \\\n",
       "473   2016-04-27 00:53:00       Flexible Seating for Flexible Learning   \n",
       "23374 2016-04-27 02:04:15                            iPad for Learners   \n",
       "7176  2016-04-27 07:24:47             Robots are Taking over 2nd Grade   \n",
       "5145  2016-04-27 08:45:34          Books to Power Powerful Book Clubs!   \n",
       "2521  2016-04-27 09:33:03  Supplies to Support my Struggling Readers!!   \n",
       "\n",
       "                                         project_essay_1  \\\n",
       "473    I recently read an article about giving studen...   \n",
       "23374  Never has society so rapidly changed. Technolo...   \n",
       "7176   Computer coding and robotics, my second grader...   \n",
       "5145   Do you remember the book you read that made yo...   \n",
       "2521   My students are all struggling readers. I supp...   \n",
       "\n",
       "                                         project_essay_2  \\\n",
       "473    I teach at a low-income (Title 1) school. Ever...   \n",
       "23374  Our Language Arts and Social Justice Magnet Sc...   \n",
       "7176   We are a small, rural school in Northwest Ohio...   \n",
       "5145   My students are part of an exciting adventure....   \n",
       "2521   My students live in a lower income area in Cen...   \n",
       "\n",
       "                                         project_essay_3  \\\n",
       "473    We need a classroom rug that we can use as a c...   \n",
       "23374  \\\"Is it my turn, Ms. K? When am I going to be ...   \n",
       "7176   We have a new technology teacher to our distri...   \n",
       "5145   We are fortunate enough to be a \\\"project scho...   \n",
       "2521   The materials I am requesting will be used dur...   \n",
       "\n",
       "                                         project_essay_4  \\\n",
       "473    Benjamin Franklin once said, \\\"Tell me and I f...   \n",
       "23374  By donating to this project, you will give my ...   \n",
       "7176   You can help this dream of ours become a reali...   \n",
       "5145   As a new teacher my book shelves are bare or t...   \n",
       "2521   Imagine not being able to read the text you ar...   \n",
       "\n",
       "                                project_resource_summary  \\\n",
       "473    My students need flexible seating in the class...   \n",
       "23374                      My students need 1 ipad mini.   \n",
       "7176   My students need a robot mouse STEM activity s...   \n",
       "5145   My students need books to help support their h...   \n",
       "2521   My students need phonics and reading comprehen...   \n",
       "\n",
       "       teacher_number_of_previously_posted_projects  project_is_approved  \\\n",
       "473                                               2                    1   \n",
       "23374                                           127                    1   \n",
       "7176                                             72                    1   \n",
       "5145                                              6                    1   \n",
       "2521                                             27                    0   \n",
       "\n",
       "                   clean_categories               clean_subcategories  \\\n",
       "473                 AppliedLearning                  EarlyDevelopment   \n",
       "23374             Literacy_Language                      ESL Literacy   \n",
       "7176   Math_Science AppliedLearning  AppliedSciences EarlyDevelopment   \n",
       "5145              Literacy_Language                          Literacy   \n",
       "2521              Literacy_Language       Literacy Literature_Writing   \n",
       "\n",
       "      teacher_prefix project_grade_category  \\\n",
       "473              Mrs          Grades_PreK_2   \n",
       "23374             Mr             Grades_6_8   \n",
       "7176              Ms             Grades_6_8   \n",
       "5145             Mrs          Grades_PreK_2   \n",
       "2521             Mrs          Grades_PreK_2   \n",
       "\n",
       "                                                   essay  \n",
       "473    I recently read an article about giving studen...  \n",
       "23374  Never has society so rapidly changed. Technolo...  \n",
       "7176   Computer coding and robotics, my second grader...  \n",
       "5145   Do you remember the book you read that made yo...  \n",
       "2521   My students are all struggling readers. I supp...  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "project_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I recently read an article about giving students a choice about how they learn. We already set goals; why not let them choose where to sit, and give them options of what to sit on?I teach at a low-income (Title 1) school. Every year, I have a class with a range of abilities, yet they are all the same age. They learn differently, and they have different interests. Some have ADHD, and some are fast learners. Yet they are eager and active learners that want and need to be able to move around the room, yet have a place that they can be comfortable to complete their work.We need a classroom rug that we can use as a class for reading time, and students can use during other learning times. I have also requested four Kore Kids wobble chairs and four Back Jack padded portable chairs so that students can still move during whole group lessons without disrupting the class. Having these areas will provide these little ones with a way to wiggle while working.Benjamin Franklin once said, \\\"Tell me and I forget, teach me and I may remember, involve me and I learn.\\\" I want these children to be involved in their learning by having a choice on where to sit and how to learn, all by giving them options for comfortable flexible seating.\n",
      "==================================================\n",
      "Wasn't recess one of your favorite times of day in school? I know it was mine, and most of my students! It is also important as it is a time to teach social skills, compassion, and teamwork.I teach 24 very energetic and enthusiastic kindergarteners at a preK-8 inner city school. Our school building used to be a high school and therefore, while there is open space to run around at recess time, there is no playground equipment for the students to use. Our kindergarten program is full day therefore it is very important for my students to have time outside to play and take a \\\"brain break\\\". It is a time that they can get some energy out and they can learn about working together without even realizing it.The materials that I have requested in this project will be used outside for the students during recess time. They will help the students with their gross motor skills, in learning how to use certain equipment appropriately. Some of the materials, such as the jump ropes will also help them learn to work together and improve their social skills.I truly believe that the donations to this project will help my students keep a happy disposition and help them look forward to coming to school. While we work to teach the students games and activities that do not require equipment now, it is difficult to send them off on their own to work together, therefore impeding on the development of their social and team building skills. The materials  will help them work together, therefore improving how they will work together in the classroom.\n",
      "==================================================\n",
      "My students have become artists!  This school year they dove head first into a new art program developed for student in special day programs who are classified as Emotionally Disturbed.  These kids tend to work better in small groups and have projects that allow them to get up, move around, listen to music, work with their hands and freely be themselves.  Often times, out in regular education, the classrooms have too many kids,  the rigor of work can be overwhelming and the kids sometimes don't know how to work through their emotions.  To help them out, we created an art program focusing on 3D Art and pottery that allows them to access their creative juices, but do so in an environment that feels safe and welcoming.\\r\\nAs the art program has been such a success, the school has asked me to teach a 2nd class of art to students in our special day classes who are classified as intellectually disabled.  I am so excited to be able to expand our pottery project and allow other students to experience art on a daily basis.This school year we launched our Pottery Project and introduced pottery to the students each week on Thursdays and Fridays.  The students had so much fun.  They learned how to throw on the wheels and they learned  how to hand build with clay.  The rest of the week they spent doing 2D and 3D art projects, which included making 3D conversational heart, 3D words, trees created out of wire and paper mache, masks, boxes and used wood burning tools.\\r\\nNext school year multiple students in the SDC program on our campus will be able to take an art class designed specifically with the in mind, focusing in on their own personal learning styles.  It is so very exciting to create an art program that will challenge the students to empower art.nannan\n",
      "==================================================\n",
      "My students are hardworking, dedicated, students who come to school every day in spite of the daily challenges they face. They live in a high poverty neighborhood, and each and every student receives a free breakfast and lunch from school. The surrounding neighborhood is gang infested, and often violent, but that does not deter my students from coming to school.\\r\\n\\r\\n    After seeing \\\"He Named Me Malala\\\" my students came back to school with a new found appreciation for their free and public education.\\r\\nMy students will read \\\"I am Malala\\\" aloud, together with their classmates, over several weeks. After they have read the book they will use the Kindle Fires to do a research project on education, and the lack thereof, in countries other than the United States. They will choose a country that does not provide a free and public education for its children, or a country that limits education to boys only. They may also choose to research the Syrian refugee crisis and how it is affecting the children involved by keeping them out of school. Once their research is done, we will go to the computer lab where they will type an essay reflecting their research.\\r\\n The goal is for my students to gain a deep understanding of how important education is, and how privileged they are in this country to get to come to school for free.nannan\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# printing some random reviews\n",
    "\n",
    "print(project_data['essay'].values[0])\n",
    "print(\"=\"*50)\n",
    "print(project_data['essay'].values[500])\n",
    "print(\"=\"*50)\n",
    "print(project_data['essay'].values[1000])\n",
    "print(\"=\"*50)\n",
    "print(project_data['essay'].values[2000])\n",
    "print(\"=\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://stackoverflow.com/a/47091490/4084039\n",
    "import re\n",
    "\n",
    "def decontracted(phrase):#https://stackoverflow.com/a/47091490/4084039\n",
    "    # specific\n",
    "    phrase = re.sub(r\"won't\", \"will not\", phrase)\n",
    "    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n",
    "\n",
    "    # general\n",
    "    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n",
    "    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n",
    "    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n",
    "    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n",
    "    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n",
    "    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n",
    "    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n",
    "    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n",
    "    return phrase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My students are hardworking, dedicated, students who come to school every day in spite of the daily challenges they face. They live in a high poverty neighborhood, and each and every student receives a free breakfast and lunch from school. The surrounding neighborhood is gang infested, and often violent, but that does not deter my students from coming to school.\\r\\n\\r\\n    After seeing \\\"He Named Me Malala\\\" my students came back to school with a new found appreciation for their free and public education.\\r\\nMy students will read \\\"I am Malala\\\" aloud, together with their classmates, over several weeks. After they have read the book they will use the Kindle Fires to do a research project on education, and the lack thereof, in countries other than the United States. They will choose a country that does not provide a free and public education for its children, or a country that limits education to boys only. They may also choose to research the Syrian refugee crisis and how it is affecting the children involved by keeping them out of school. Once their research is done, we will go to the computer lab where they will type an essay reflecting their research.\\r\\n The goal is for my students to gain a deep understanding of how important education is, and how privileged they are in this country to get to come to school for free.nannan\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "sent = decontracted(project_data['essay'].values[2000])\n",
    "print(sent)\n",
    "print(\"=\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My students are hardworking, dedicated, students who come to school every day in spite of the daily challenges they face. They live in a high poverty neighborhood, and each and every student receives a free breakfast and lunch from school. The surrounding neighborhood is gang infested, and often violent, but that does not deter my students from coming to school.        After seeing  He Named Me Malala  my students came back to school with a new found appreciation for their free and public education.  My students will read  I am Malala  aloud, together with their classmates, over several weeks. After they have read the book they will use the Kindle Fires to do a research project on education, and the lack thereof, in countries other than the United States. They will choose a country that does not provide a free and public education for its children, or a country that limits education to boys only. They may also choose to research the Syrian refugee crisis and how it is affecting the children involved by keeping them out of school. Once their research is done, we will go to the computer lab where they will type an essay reflecting their research.   The goal is for my students to gain a deep understanding of how important education is, and how privileged they are in this country to get to come to school for free.nannan\n"
     ]
    }
   ],
   "source": [
    "# \\r \\n \\t remove from string python: http://texthandler.com/info/remove-line-breaks-python/\n",
    "sent = sent.replace('\\\\r', ' ')\n",
    "sent = sent.replace('\\\\\"', ' ')\n",
    "sent = sent.replace('\\\\n', ' ')\n",
    "print(sent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My students are hardworking dedicated students who come to school every day in spite of the daily challenges they face They live in a high poverty neighborhood and each and every student receives a free breakfast and lunch from school The surrounding neighborhood is gang infested and often violent but that does not deter my students from coming to school After seeing He Named Me Malala my students came back to school with a new found appreciation for their free and public education My students will read I am Malala aloud together with their classmates over several weeks After they have read the book they will use the Kindle Fires to do a research project on education and the lack thereof in countries other than the United States They will choose a country that does not provide a free and public education for its children or a country that limits education to boys only They may also choose to research the Syrian refugee crisis and how it is affecting the children involved by keeping them out of school Once their research is done we will go to the computer lab where they will type an essay reflecting their research The goal is for my students to gain a deep understanding of how important education is and how privileged they are in this country to get to come to school for free nannan\n"
     ]
    }
   ],
   "source": [
    "#remove spacial character: https://stackoverflow.com/a/5843547/4084039\n",
    "sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
    "print(sent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://gist.github.com/sebleier/554280\n",
    "# we are removing the words from the stop words list: 'no', 'nor', 'not'\n",
    "stopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n",
    "            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n",
    "            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n",
    "            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n",
    "            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n",
    "            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n",
    "            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n",
    "            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n",
    "            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n",
    "            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n",
    "            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n",
    "            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n",
    "            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n",
    "            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n",
    "            'won', \"won't\", 'wouldn', \"wouldn't\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 25000/25000 [00:25<00:00, 968.97it/s]\n"
     ]
    }
   ],
   "source": [
    "#Combining all above the statesment.\n",
    "from tqdm import tqdm\n",
    "preprocessed_essays = []\n",
    "# tqdm is for printing the status bar\n",
    "for sentance in tqdm(project_data['essay'].values):\n",
    "    sent = decontracted(sentance)\n",
    "    sent = sent.replace('\\\\r', ' ')\n",
    "    sent = sent.replace('\\\\\"', ' ')\n",
    "    sent = sent.replace('\\\\n', ' ')\n",
    "    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
    "    # https://gist.github.com/sebleier/554280\n",
    "    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n",
    "    preprocessed_essays.append(sent.lower().strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'students become artists school year dove head first new art program developed student special day programs classified emotionally disturbed kids tend work better small groups projects allow get move around listen music work hands freely often times regular education classrooms many kids rigor work overwhelming kids sometimes not know work emotions help created art program focusing 3d art pottery allows access creative juices environment feels safe welcoming art program success school asked teach 2nd class art students special day classes classified intellectually disabled excited able expand pottery project allow students experience art daily basis school year launched pottery project introduced pottery students week thursdays fridays students much fun learned throw wheels learned hand build clay rest week spent 2d 3d art projects included making 3d conversational heart 3d words trees created wire paper mache masks boxes used wood burning tools next school year multiple students sdc program campus able take art class designed specifically mind focusing personal learning styles exciting create art program challenge students empower art nannan'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after preprocesing\n",
    "preprocessed_essays[1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.5-b Preprocessing of `project_title`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████| 25000/25000 [00:01<00:00, 17163.68it/s]\n"
     ]
    }
   ],
   "source": [
    "# Combining all the above statemennts \n",
    "from tqdm import tqdm\n",
    "preprocessed_titles = []\n",
    "# tqdm is for printing the status bar\n",
    "for sentence in tqdm(project_data['project_title'].values):\n",
    "    sent = decontracted(sentence)\n",
    "    sent = sent.replace('\\\\r', ' ')\n",
    "    sent = sent.replace('\\\\\"', ' ')\n",
    "    sent = sent.replace('\\\\n', ' ')\n",
    "    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n",
    "    # https://gist.github.com/sebleier/554280\n",
    "    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n",
    "    preprocessed_titles.append(sent.lower().strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'art a hard days work'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preprocessed_titles[1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "project_data['clean_titles'] = preprocessed_titles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0                                      25000\n",
       "id                                              25000\n",
       "teacher_id                                      25000\n",
       "school_state                                    25000\n",
       "Date                                            25000\n",
       "project_title                                   25000\n",
       "project_essay_1                                 25000\n",
       "project_essay_2                                 25000\n",
       "project_essay_3                                   831\n",
       "project_essay_4                                   831\n",
       "project_resource_summary                        25000\n",
       "teacher_number_of_previously_posted_projects    25000\n",
       "project_is_approved                             25000\n",
       "clean_categories                                25000\n",
       "clean_subcategories                             25000\n",
       "teacher_prefix                                  25000\n",
       "project_grade_category                          25000\n",
       "essay                                           25000\n",
       "clean_titles                                    25000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "project_data.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Uptil here we preprocessed  donor choose data.\n",
    "Next is to split  data in train,test and CV\n",
    " then we have to vectorize data for BoW,TFIDF,Avg W2Vec and TFIDF weighted W2Vec"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.6 Test - Train  Data Spliting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(project_data,project_data['project_is_approved'],\\\n",
    "test_size=0.33, stratify = project_data['project_is_approved'])\n",
    "X_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size=0.33, stratify=y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train.drop(['project_is_approved'], axis=1, inplace=True)\n",
    "X_test.drop(['project_is_approved'], axis=1, inplace=True)\n",
    "X_cv.drop(['project_is_approved'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(11222, 18) (11222,)\n",
      "(5528, 18) (5528,)\n",
      "(8250, 18) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, y_train.shape)\n",
    "print(X_cv.shape, y_cv.shape)\n",
    "print(X_test.shape, y_test.shape)\n",
    "\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7 Preparing Data for Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'id', 'teacher_id', 'school_state', 'Date',\n",
       "       'project_title', 'project_essay_1', 'project_essay_2',\n",
       "       'project_essay_3', 'project_essay_4', 'project_resource_summary',\n",
       "       'teacher_number_of_previously_posted_projects', 'project_is_approved',\n",
       "       'clean_categories', 'clean_subcategories', 'teacher_prefix',\n",
       "       'project_grade_category', 'essay', 'clean_titles'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "project_data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### we are going to consider\n",
    "\n",
    "       - school_state : categorical data\n",
    "       - clean_categories : categorical data\n",
    "       - clean_subcategories : categorical data\n",
    "       - project_grade_category : categorical data\n",
    "       - teacher_prefix : categorical data\n",
    "       \n",
    "       - project_title : text data\n",
    "       - text : text data\n",
    "       - project_resource_summary: text data (optinal)\n",
    "       \n",
    "       - quantity : numerical (optinal)\n",
    "       - teacher_number_of_previously_posted_projects : numerical\n",
    "       - price : numerical"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.1 Vectorizing Categorical data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "•https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/handling-categorical-and-numerical-features/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.1.a) One hot encode - Clean categories of project_subject_category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Warmth', 'Care_Hunger', 'History_Civics', 'Music_Arts', 'AppliedLearning', 'SpecialNeeds', 'Health_Sports', 'Math_Science', 'Literacy_Language']\n",
      "Shape of matrix of Train data after one hot encoding  (11222, 9)\n",
      "Shape of matrix of Test data after one hot encoding  (8250, 9)\n",
      "Shape of matrix of CV data after one hot encoding  (5528, 9)\n"
     ]
    }
   ],
   "source": [
    "# we use count vectorizer to convert the values into one \n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = CountVectorizer(vocabulary=list(sorted_cat_dict.keys()), lowercase=False, binary=True)\n",
    "vectorizer.fit(X_train['clean_categories'].values)\n",
    "categories_one_hot_train = vectorizer.fit_transform(X_train['clean_categories'].values)\n",
    "categories_one_hot_test = vectorizer.transform(X_test['clean_categories'].values)\n",
    "categories_one_hot_cv = vectorizer.transform(X_cv['clean_categories'].values)\n",
    "print(vectorizer.get_feature_names())\n",
    "print(\"Shape of matrix of Train data after one hot encoding \",categories_one_hot_train.shape)\n",
    "print(\"Shape of matrix of Test data after one hot encoding \",categories_one_hot_test.shape)\n",
    "print(\"Shape of matrix of CV data after one hot encoding \",categories_one_hot_cv.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.1.b)One hot encode-Clean categories of project_sub_subcategories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Economics', 'CommunityService', 'FinancialLiteracy', 'ParentInvolvement', 'Extracurricular', 'Civics_Government', 'ForeignLanguages', 'NutritionEducation', 'Warmth', 'Care_Hunger', 'SocialSciences', 'PerformingArts', 'CharacterEducation', 'TeamSports', 'Other', 'College_CareerPrep', 'Music', 'History_Geography', 'Health_LifeScience', 'ESL', 'EarlyDevelopment', 'Gym_Fitness', 'EnvironmentalScience', 'VisualArts', 'Health_Wellness', 'AppliedSciences', 'SpecialNeeds', 'Literature_Writing', 'Mathematics', 'Literacy']\n",
      "Shape of matrix of Train data after one hot encoding  (11222, 30)\n",
      "Shape of matrix of Test data after one hot encoding  (8250, 30)\n",
      "Shape of matrix of Cross Validation data after one hot encoding  (5528, 30)\n"
     ]
    }
   ],
   "source": [
    "# we use count vectorizer to convert the values into one\n",
    "vectorizer = CountVectorizer(vocabulary=list(sorted_sub_subcat_dict.keys()), lowercase=False,\n",
    "binary=True)\n",
    "vectorizer.fit(X_train['clean_subcategories'].values)\n",
    "sub_categories_one_hot_train = vectorizer.fit_transform(X_train['clean_subcategories'].values)\n",
    "sub_categories_one_hot_test = vectorizer.transform(X_test['clean_subcategories'].values)\n",
    "sub_categories_one_hot_cv = vectorizer.transform(X_cv['clean_subcategories'].values)\n",
    "print(vectorizer.get_feature_names())\n",
    "print(\"Shape of matrix of Train data after one hot encoding \",sub_categories_one_hot_train.shape)\n",
    "print(\"Shape of matrix of Test data after one hot encoding \",sub_categories_one_hot_test.shape)\n",
    "print(\"Shape of matrix of Cross Validation data after one hot encoding \",sub_categories_one_hot_cv\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.1.c)One hot encode - School states"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count of all the words in corpus python: https://stackoverflow.com/a/22898595/4084039\n",
    "my_counter = Counter()\n",
    "for word in project_data['school_state'].values:\n",
    "    my_counter.update(word.split())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "school_states_dict = dict(my_counter)\n",
    "sorted_school_states_dict = dict(sorted(school_states_dict.items(), key=lambda kv: kv[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of matrix of Train data after one hot encoding (11222, 51)\n",
      "Shape of matrix of Test data after one hot encoding  (8250, 51)\n",
      "Shape of matrix of Cross Validation data after one hot encoding (5528, 51)\n"
     ]
    }
   ],
   "source": [
    "## we use count vectorizer to convert the values into one hot encoded features\n",
    "vectorizer = CountVectorizer(vocabulary=list(sorted_school_states_dict.keys()), lowercase=False, binary=True)\n",
    "vectorizer.fit(X_train['school_state'].values)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "school_state_categories_one_hot_train = vectorizer.fit_transform(X_train['school_state'].values)\n",
    "school_state_categories_one_hot_test = vectorizer.transform(X_test['school_state'].values)\n",
    "school_state_categories_one_hot_cv = vectorizer.transform(X_cv['school_state'].values)\n",
    "\n",
    "\n",
    "print(\"Shape of matrix of Train data after one hot encoding\",school_state_categories_one_hot_train.shape)\n",
    "print(\"Shape of matrix of Test data after one hot encoding \",school_state_categories_one_hot_test.shape)\n",
    "print(\"Shape of matrix of Cross Validation data after one hot encoding\",school_state_categories_one_hot_cv.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.1.d) One hot encode - Teacher_prefix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_counter = Counter()\n",
    "for teacher_prefix in project_data['teacher_prefix'].values:\n",
    "    teacher_prefix = str(teacher_prefix)\n",
    "    my_counter.update(teacher_prefix.split())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "teacher_prefix_cat_dict = dict(my_counter)\n",
    "sorted_teacher_prefix_cat_dict = dict(sorted(teacher_prefix_cat_dict.items(), key=lambda kv: kv[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Teacher', 'Mr', 'Ms', 'Mrs']\n",
      "Shape of matrix after one hot encoding  (11222, 4)\n",
      "Shape of matrix after one hot encoding  (8250, 4)\n",
      "Shape of matrix after one hot encoding  (5528, 4)\n"
     ]
    }
   ],
   "source": [
    "## we use count vectorizer to convert the values into one hot encoded features\n",
    "#https://stackoverflow.com/questions/39303912/tfidfvectorizer-in-scikit-learn-valueerror-np-nanis-an-invalid-document/39308809#39308809\n",
    "vectorizer = CountVectorizer(vocabulary=list(sorted_teacher_prefix_cat_dict.keys()), lowercase=False, binary=True)\n",
    "vectorizer.fit(X_train['teacher_prefix'].values.astype(\"U\"))\n",
    "\n",
    "teacher_prefix_categories_one_hot_train = vectorizer.fit_transform(X_train['teacher_prefix'].values.astype(\"U\"))\n",
    "teacher_prefix_categories_one_hot_test = vectorizer.transform(X_test['teacher_prefix'].values.astype(\"U\"))\n",
    "teacher_prefix_categories_one_hot_cv = vectorizer.transform(X_cv['teacher_prefix'].values.astype(\"U\"))\n",
    "print(vectorizer.get_feature_names())\n",
    "print(\"Shape of matrix after one hot encoding \",teacher_prefix_categories_one_hot_train.shape)\n",
    "print(\"Shape of matrix after one hot encoding \",teacher_prefix_categories_one_hot_test.shape)\n",
    "print(\"Shape of matrix after one hot encoding \",teacher_prefix_categories_one_hot_cv.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.1.e) One hot encode - project_grade_category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_counter = Counter()\n",
    "for project_grade in project_data['project_grade_category'].values:\n",
    "    my_counter.update(project_grade.split())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "project_grade_cat_dict = dict(my_counter)\n",
    "sorted_project_grade_cat_dict = dict(sorted(project_grade_cat_dict.items(), key=lambda kv: kv[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Grades_9_12', 'Grades_6_8', 'Grades_3_5', 'Grades_PreK_2']\n",
      "Shape of matrix of Train data after one hot encoding (11222, 4)\n",
      "Shape of matrix of Test data after one hot encoding  (8250, 4)\n",
      "Shape of matrix of Cross Validation data after one hot encoding (5528, 4)\n"
     ]
    }
   ],
   "source": [
    "## we use count vectorizer to convert the values into one hot encoded features\n",
    "vectorizer = CountVectorizer(vocabulary=list(sorted_project_grade_cat_dict.keys()), lowercase=False, binary=True)\n",
    "vectorizer.fit(X_train['project_grade_category'].values)\n",
    "project_grade_categories_one_hot_train = vectorizer.fit_transform(X_train['project_grade_category'].values)\n",
    "project_grade_categories_one_hot_test = vectorizer.transform(X_test['project_grade_category'].values)\n",
    "project_grade_categories_one_hot_cv = vectorizer.transform(X_cv['project_grade_category'].values)\n",
    "print(vectorizer.get_feature_names())\n",
    "print(\"Shape of matrix of Train data after one hot encoding\",project_grade_categories_one_hot_train.shape)\n",
    "print(\"Shape of matrix of Test data after one hot encoding \",project_grade_categories_one_hot_test.shape)\n",
    "print(\"Shape of matrix of Cross Validation data after one hot encoding\",project_grade_categories_one_hot_cv.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.2 Vectorizing Text data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7.2.1-a Bag of words project essays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(11222, 5000) (11222,)\n",
      "(5528, 5000) (5528,)\n",
      "(8250, 5000) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# We are considering only the words which appeared in at least 10 documents(rows or projects).\n",
    "#https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = CountVectorizer(min_df=10, max_features=5000)\n",
    "vectorizer.fit(X_train['essay'].values) # fit has to happen only on train data\n",
    "\n",
    "# we use the fitted CountVectorizer to convert the text to vector\n",
    "X_train_essay_bow = vectorizer.fit_transform(X_train['essay'].values)\n",
    "X_cv_essay_bow = vectorizer.transform(X_cv['essay'].values)\n",
    "X_test_essay_bow = vectorizer.transform(X_test['essay'].values)\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_essay_bow.shape, y_train.shape)\n",
    "print(X_cv_essay_bow.shape, y_cv.shape)\n",
    "print(X_test_essay_bow.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7.2.1-b Bag of words of project title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(11222, 732) (11222,)\n",
      "(5528, 732) (5528,)\n",
      "(8250, 732) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vectorizer = CountVectorizer(min_df=10, max_features=5000)\n",
    "vectorizer.fit(X_train['clean_titles'].values) # fit has to happen only on train data\n",
    "\n",
    "# we use the fitted CountVectorizer to convert the text to vector\n",
    "X_train_titles_bow = vectorizer.fit_transform(X_train['clean_titles'].values)\n",
    "X_cv_titles_bow = vectorizer.transform(X_cv['clean_titles'].values)\n",
    "X_test_titles_bow = vectorizer.transform(X_test['clean_titles'].values)\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_titles_bow.shape, y_train.shape)\n",
    "print(X_cv_titles_bow.shape, y_cv.shape)\n",
    "print(X_test_titles_bow.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7.2.2 -a TFIDF vectorizer project_essays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "Shape of matrix after one hot encodig  (11222, 6763)\n",
      "Shape of matrix after one hot encodig  (5528, 6763)\n",
      "Shape of matrix after one hot encodig  (8250, 6763)\n"
     ]
    }
   ],
   "source": [
    "#https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfTransformer.html#sklearn.feature_extraction.text.TfidfTransformer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "vectorizer = TfidfVectorizer(min_df=10)\n",
    "X_train_essay_tfidf = vectorizer.fit_transform((X_train['essay'].values))\n",
    "X_cv_essay_tfidf = vectorizer.transform((X_cv['essay'].values))\n",
    "X_test_essay_tfidf = vectorizer.transform((X_test['essay'].values))\n",
    "print(\"After vectorizations\")\n",
    "print(\"Shape of matrix after one hot encodig \",X_train_essay_tfidf.shape)\n",
    "print(\"Shape of matrix after one hot encodig \",X_cv_essay_tfidf.shape)\n",
    "print(\"Shape of matrix after one hot encodig \",X_test_essay_tfidf.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7.2.2 -b TFIDF vectorizer project_titles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of matrix after one hot encodig  (11222, 732)\n",
      "Shape of matrix after one hot encodig  (5528, 732)\n",
      "Shape of matrix after one hot encodig  (8250, 732)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "vectorizer = TfidfVectorizer(min_df=10)\n",
    "X_train_titles_tfidf = vectorizer.fit_transform((X_train['clean_titles'].values))\n",
    "X_cv_titles_tfidf = vectorizer.transform((X_cv['clean_titles'].values))\n",
    "X_test_titles_tfidf = vectorizer.transform((X_test['clean_titles'].values))\n",
    "print(\"Shape of matrix after one hot encodig \",X_train_titles_tfidf.shape)\n",
    "print(\"Shape of matrix after one hot encodig \",X_cv_titles_tfidf.shape)\n",
    "print(\"Shape of matrix after one hot encodig \",X_test_titles_tfidf.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7.2.3-a Using Pretrained Models: Avg W2V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# Reading glove vectors in python: https://stackoverflow.com/a/38230349/4084039\\ndef loadGloveModel(gloveFile):\\n    print (\"Loading Glove Model\")\\n    f = open(gloveFile,\\'r\\', encoding=\"utf8\")\\n    model = {}\\n    for line in tqdm(f):\\n        splitLine = line.split()\\n        word = splitLine[0]\\n        embedding = np.array([float(val) for val in splitLine[1:]])\\n        model[word] = embedding\\n    print (\"Done.\",len(model),\" words loaded!\")\\n    return model\\nmodel = loadGloveModel(\\'glove.42B.300d.txt\\')\\n\\n# ============================\\nOutput:\\n    \\nLoading Glove Model\\n1917495it [06:32, 4879.69it/s]\\nDone. 1917495  words loaded!\\n\\n# ============================\\n\\nwords = []\\nfor i in preproced_texts:\\n    words.extend(i.split(\\' \\'))\\n\\nfor i in preproced_titles:\\n    words.extend(i.split(\\' \\'))\\nprint(\"all the words in the coupus\", len(words))\\nwords = set(words)\\nprint(\"the unique words in the coupus\", len(words))\\n\\ninter_words = set(model.keys()).intersection(words)\\nprint(\"The number of words that are present in both glove vectors and our coupus\",       len(inter_words),\"(\",np.round(len(inter_words)/len(words)*100,3),\"%)\")\\n\\nwords_courpus = {}\\nwords_glove = set(model.keys())\\nfor i in words:\\n    if i in words_glove:\\n        words_courpus[i] = model[i]\\nprint(\"word 2 vec length\", len(words_courpus))\\n\\n\\n# stronging variables into pickle files python: http://www.jessicayung.com/how-to-use-pickle-to-save-and-load-variables-in-python/\\n\\nimport pickle\\nwith open(\\'glove_vectors\\', \\'wb\\') as f:\\n    pickle.dump(words_courpus, f)\\n\\n\\n'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "# Reading glove vectors in python: https://stackoverflow.com/a/38230349/4084039\n",
    "def loadGloveModel(gloveFile):\n",
    "    print (\"Loading Glove Model\")\n",
    "    f = open(gloveFile,'r', encoding=\"utf8\")\n",
    "    model = {}\n",
    "    for line in tqdm(f):\n",
    "        splitLine = line.split()\n",
    "        word = splitLine[0]\n",
    "        embedding = np.array([float(val) for val in splitLine[1:]])\n",
    "        model[word] = embedding\n",
    "    print (\"Done.\",len(model),\" words loaded!\")\n",
    "    return model\n",
    "model = loadGloveModel('glove.42B.300d.txt')\n",
    "\n",
    "# ============================\n",
    "Output:\n",
    "    \n",
    "Loading Glove Model\n",
    "1917495it [06:32, 4879.69it/s]\n",
    "Done. 1917495  words loaded!\n",
    "\n",
    "# ============================\n",
    "\n",
    "words = []\n",
    "for i in preproced_texts:\n",
    "    words.extend(i.split(' '))\n",
    "\n",
    "for i in preproced_titles:\n",
    "    words.extend(i.split(' '))\n",
    "print(\"all the words in the coupus\", len(words))\n",
    "words = set(words)\n",
    "print(\"the unique words in the coupus\", len(words))\n",
    "\n",
    "inter_words = set(model.keys()).intersection(words)\n",
    "print(\"The number of words that are present in both glove vectors and our coupus\", \\\n",
    "      len(inter_words),\"(\",np.round(len(inter_words)/len(words)*100,3),\"%)\")\n",
    "\n",
    "words_courpus = {}\n",
    "words_glove = set(model.keys())\n",
    "for i in words:\n",
    "    if i in words_glove:\n",
    "        words_courpus[i] = model[i]\n",
    "print(\"word 2 vec length\", len(words_courpus))\n",
    "\n",
    "\n",
    "# stronging variables into pickle files python: http://www.jessicayung.com/how-to-use-pickle-to-save-and-load-variables-in-python/\n",
    "\n",
    "import pickle\n",
    "with open('glove_vectors', 'wb') as f:\n",
    "    pickle.dump(words_courpus, f)\n",
    "\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# stronging variables into pickle files python: http://www.jessicayung.com/how-to-use-pickle-to-save-and-load-variables-in-python/\n",
    "# make sure you have the glove_vectors file\n",
    "with open(r'C:\\Users\\SAI\\Downloads\\Assignment_donorchoose 2018\\glove_vectors', 'rb') as f:\n",
    "    model = pickle.load(f)\n",
    "    glove_words =  set(model.keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Avg W2V Train Essay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 11222/11222 [00:14<00:00, 790.97it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11222\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "avg_w2v_vectors_train = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm((X_train['essay'].values)): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if word in glove_words:\n",
    "            vector += model[word]\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        vector /= cnt_words\n",
    "    avg_w2v_vectors_train.append(vector)\n",
    "\n",
    "print(len(avg_w2v_vectors_train))\n",
    "print(len(avg_w2v_vectors_train[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Avg W2V CV Essay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████| 5528/5528 [00:06<00:00, 795.63it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5528\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "avg_w2v_vectors_cv = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm((X_cv['essay'].values)): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if word in glove_words:\n",
    "            vector += model[word]\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        vector /= cnt_words\n",
    "    avg_w2v_vectors_cv.append(vector)\n",
    "\n",
    "print(len(avg_w2v_vectors_cv))\n",
    "print(len(avg_w2v_vectors_cv[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Avg W2V Test Essay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████| 8250/8250 [00:07<00:00, 1090.76it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8250\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "avg_w2v_vectors_test = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm((X_test['essay'].values)): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if word in glove_words:\n",
    "            vector += model[word]\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        vector /= cnt_words\n",
    "    avg_w2v_vectors_test.append(vector)\n",
    "\n",
    "print(len(avg_w2v_vectors_test))\n",
    "print(len(avg_w2v_vectors_test[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Avg W2V - project_title for Train,CV and Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████| 11222/11222 [00:00<00:00, 18516.36it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11222\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# Similarly we can vectorize for title also\n",
    "avg_w2v_vectors_train_titles = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm((X_train['clean_titles'].values)): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if word in glove_words:\n",
    "            vector += model[word]\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        vector /= cnt_words\n",
    "    avg_w2v_vectors_train_titles.append(vector)\n",
    "\n",
    "print(len(avg_w2v_vectors_train_titles))\n",
    "print(len(avg_w2v_vectors_train_titles[0]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 5528/5528 [00:00<00:00, 22829.04it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5528\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "avg_w2v_vectors_cv_titles = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm((X_cv['clean_titles'].values)): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if word in glove_words:\n",
    "            vector += model[word]\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        vector /= cnt_words\n",
    "    avg_w2v_vectors_cv_titles.append(vector)\n",
    "\n",
    "print(len(avg_w2v_vectors_cv_titles))\n",
    "print(len(avg_w2v_vectors_cv_titles[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 8250/8250 [00:00<00:00, 18246.91it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8250\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "avg_w2v_vectors_test_titles = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm((X_test['clean_titles'].values)): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    cnt_words =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if word in glove_words:\n",
    "            vector += model[word]\n",
    "            cnt_words += 1\n",
    "    if cnt_words != 0:\n",
    "        vector /= cnt_words\n",
    "    avg_w2v_vectors_test_titles.append(vector)\n",
    "\n",
    "print(len(avg_w2v_vectors_test_titles))\n",
    "print(len(avg_w2v_vectors_test_titles[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7.2.3-b Using Pretrained Models: TFIDF weighted W2V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\n",
    "tfidf_model = TfidfVectorizer()\n",
    "tfidf_model.fit((X_train['essay'].values))\n",
    "# we are converting a dictionary with word as a key, and the idf as a value\n",
    "dictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\n",
    "tfidf_words = set(tfidf_model.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 11222/11222 [01:34<00:00, 119.02it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11222\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "tfidf_w2v_vectors_train_essay = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_train['essay'].values): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    tfidf_w2v_vectors_train_essay.append(vector)\n",
    "\n",
    "print(len(tfidf_w2v_vectors_train_essay))\n",
    "print(len(tfidf_w2v_vectors_train_essay[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████| 8250/8250 [01:07<00:00, 122.07it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8250\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "tfidf_w2v_vectors_test_essay = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_test['essay'].values): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    tfidf_w2v_vectors_test_essay.append(vector)\n",
    "\n",
    "print(len(tfidf_w2v_vectors_test_essay))\n",
    "print(len(tfidf_w2v_vectors_test_essay[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████| 5528/5528 [00:45<00:00, 122.47it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5528\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# compute average word2vec for each review.\n",
    "tfidf_w2v_vectors_cv_essay = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_cv['essay'].values): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    tfidf_w2v_vectors_cv_essay.append(vector)\n",
    "\n",
    "print(len(tfidf_w2v_vectors_cv_essay))\n",
    "print(len(tfidf_w2v_vectors_cv_essay[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TFIDF weighted W2V - project_title for Train, Test and CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf_model = TfidfVectorizer()\n",
    "tfidf_model.fit(X_train['clean_titles'].values)\n",
    "# we are converting a dictionary with word as a key, and the idf as a value\n",
    "dictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\n",
    "tfidf_words = set(tfidf_model.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████| 11222/11222 [00:00<00:00, 12621.21it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11222\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "tfidf_w2v_vectors_train_titles = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_train['clean_titles'].values): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    tfidf_w2v_vectors_train_titles.append(vector)\n",
    "\n",
    "print(len(tfidf_w2v_vectors_train_titles))\n",
    "print(len(tfidf_w2v_vectors_train_titles[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 5528/5528 [00:00<00:00, 11782.87it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5528\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "tfidf_w2v_vectors_cv_titles = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_cv['clean_titles'].values): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    tfidf_w2v_vectors_cv_titles.append(vector)\n",
    "\n",
    "print(len(tfidf_w2v_vectors_cv_titles))\n",
    "print(len(tfidf_w2v_vectors_cv_titles[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████| 8250/8250 [00:00<00:00, 11760.70it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8250\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review.\n",
    "tfidf_w2v_vectors_test_titles = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_test['clean_titles'].values): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    tfidf_w2v_vectors_test_titles.append(vector)\n",
    "\n",
    "print(len(tfidf_w2v_vectors_test_titles))\n",
    "print(len(tfidf_w2v_vectors_test_titles[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.7.3 Vectorizing Numerical features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.7.3 - a-Price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "# https://stackoverflow.com/questions/22407798/how-to-reset-a-dataframes-indexes-for-all-groups-in-one-step\n",
    "price_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\n",
    "project_data = pd.merge(project_data, price_data, on='id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "      <th>quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>p000001</td>\n",
       "      <td>459.56</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>p000002</td>\n",
       "      <td>515.89</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id   price  quantity\n",
       "0  p000001  459.56         7\n",
       "1  p000002  515.89        21"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_data.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# join two dataframes in python:\n",
    "X_train = pd.merge(X_train, price_data, on='id', how='left')\n",
    "X_test = pd.merge(X_test, price_data, on='id', how='left')\n",
    "X_cv = pd.merge(X_cv, price_data, on='id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(11222, 1) (11222,)\n",
      "(5528, 1) (5528,)\n",
      "(8250, 1) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "standard_vec = StandardScaler(with_mean = False)\n",
    "# this will rise an error Expected 2D array, got 1D array instead: \n",
    "# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n",
    "# Reshape your data either using \n",
    "# array.reshape(-1, 1) if your data has a single feature \n",
    "# array.reshape(1, -1)  if it contains a single sample.\n",
    "standard_vec.fit(X_train['price'].values.reshape(-1,1))\n",
    "\n",
    "X_train_price_std = standard_vec.transform(X_train['price'].values.reshape(-1,1))\n",
    "X_cv_price_std = standard_vec.transform(X_cv['price'].values.reshape(-1,1))\n",
    "X_test_price_std = standard_vec.transform(X_test['price'].values.reshape(-1,1))\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_price_std.shape, y_train.shape)\n",
    "print(X_cv_price_std.shape, y_cv.shape)\n",
    "print(X_test_price_std.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 298.7497976, Standard deviation : 374.8142029086185\n"
     ]
    }
   ],
   "source": [
    "# check this one: https://www.youtube.com/watch?v=0HOqOcln3Z4&t=530s\n",
    "# standardization sklearn: https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# price_standardized = standardScalar.fit(project_data['price'].values)\n",
    "# this will rise the error\n",
    "# ValueError: Expected 2D array, got 1D array instead: array=[725.05 213.03 329.   ... 399.   287.73   5.5 ].\n",
    "# Reshape your data either using array.reshape(-1, 1)\n",
    "\n",
    "price_scalar = StandardScaler()\n",
    "price_scalar.fit(project_data['price'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\n",
    "print(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n",
    "\n",
    "# Now standardize the data with above maen and variance.\n",
    "price_standardized = price_scalar.transform(project_data['price'].values.reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.48634817],\n",
       "       [ 0.00330885],\n",
       "       [-0.66110034],\n",
       "       ...,\n",
       "       [ 0.20599594],\n",
       "       [-0.31242092],\n",
       "       [-0.08051935]])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_standardized"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.7.3-b Vectorizing numerical features: teacher_number_of_previously posted projects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(11222, 1) (11222,)\n",
      "(5528, 1) (5528,)\n",
      "(8250, 1) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "standard_vec = StandardScaler(with_mean = False)\n",
    "# this will rise an error Expected 2D array, got 1D array instead: \n",
    "# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n",
    "# Reshape your data either using \n",
    "# array.reshape(-1, 1) if your data has a single feature \n",
    "# array.reshape(1, -1)  if it contains a single sample.\n",
    "standard_vec.fit(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n",
    "\n",
    "X_train_projects_std = standard_vec.transform(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n",
    "X_cv_projects_std = standard_vec.transform(X_cv['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n",
    "X_test_projects_std = standard_vec.transform(X_test['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_projects_std.shape, y_train.shape)\n",
    "print(X_cv_projects_std.shape, y_cv.shape)\n",
    "print(X_test_projects_std.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.7.3-c On Quantity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(11222, 1) (11222,)\n",
      "(5528, 1) (5528,)\n",
      "(8250, 1) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "standard_vec = StandardScaler(with_mean = False)\n",
    "# this will rise an error Expected 2D array, got 1D array instead: \n",
    "# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n",
    "# Reshape your data either using \n",
    "# array.reshape(-1, 1) if your data has a single feature \n",
    "# array.reshape(1, -1)  if it contains a single sample.\n",
    "standard_vec.fit(X_train['quantity'].values.reshape(-1,1))\n",
    "\n",
    "X_train_qty_std = standard_vec.transform(X_train['quantity'].values.reshape(-1,1))\n",
    "X_cv_qty_std = standard_vec.transform(X_cv['quantity'].values.reshape(-1,1))\n",
    "X_test_qty_std = standard_vec.transform(X_test['quantity'].values.reshape(-1,1))\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_projects_std.shape, y_train.shape)\n",
    "print(X_cv_projects_std.shape, y_cv.shape)\n",
    "print(X_test_projects_std.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to get heatmap confusion matrix\n",
    "def get_confusion_matrix(clf,X_te,y_test):\n",
    "    y_pred = clf.predict(X_te)\n",
    "    df_cm = pd.DataFrame(confusion_matrix(y_test, y_pred), range(2),range(2))\n",
    "    df_cm.columns = ['Predicted NO','Predicted YES']\n",
    "    df_cm = df_cm.rename({0: 'Actual NO', 1: 'Actual YES'})\n",
    "    sns.set(font_scale=1.4)#for label size\n",
    "    sns.heatmap(df_cm, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix\n",
      "(11222, 5833) (11222,)\n",
      "(5528, 5833) (5528,)\n",
      "(8250, 5833) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# merge two sparse matrices: https://stackoverflow.com/a/19710648/4084039\n",
    "from scipy.sparse import hstack\n",
    "X_tr = hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,teacher_prefix_categories_one_hot_train,project_grade_categories_one_hot_train,X_train_essay_bow,X_train_titles_bow,X_train_price_std,X_train_projects_std,X_train_qty_std)).tocsr()\n",
    "X_cv = hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,project_grade_categories_one_hot_cv,X_cv_essay_bow,X_cv_titles_bow,X_cv_price_std,X_cv_projects_std,X_cv_qty_std)).tocsr()\n",
    "X_te = hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,teacher_prefix_categories_one_hot_test,project_grade_categories_one_hot_test,X_test_essay_bow,X_test_titles_bow,X_test_price_std,X_test_projects_std,X_test_qty_std)).tocsr()\n",
    "\n",
    "print(\"Final Data matrix\")\n",
    "print(X_tr.shape, y_train.shape)\n",
    "print(X_cv.shape, y_cv.shape)\n",
    "print(X_te.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Apply KNN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<ol>\n",
    "    <li><strong>[Task-1] Apply KNN(brute force version) on these feature sets</strong>\n",
    "        <ul>\n",
    "            <li><font color='red'>Set 1</font>: categorical, numerical features + project_title(BOW) + preprocessed_essay (BOW)</li>\n",
    "            <li><font color='red'>Set 2</font>: categorical, numerical features + project_title(TFIDF)+  preprocessed_essay (TFIDF)</li>\n",
    "            <li><font color='red'>Set 3</font>: categorical, numerical features + project_title(AVG W2V)+  preprocessed_essay (AVG W2V)</li>\n",
    "            <li><font color='red'>Set 4</font>: categorical, numerical features + project_title(TFIDF W2V)+  preprocessed_essay (TFIDF W2V)</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <br>\n",
    "    <li><strong>Hyper paramter tuning to find best K</strong>\n",
    "        <ul>\n",
    "    <li>Find the best hyper parameter which results in the maximum <a href='https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/receiver-operating-characteristic-curve-roc-curve-and-auc-1/'>AUC</a> value</li>\n",
    "    <li>Find the best hyper paramter using k-fold cross validation (or) simple cross validation data</li>\n",
    "    <li>Use gridsearch-cv or randomsearch-cv or  write your own for loops to do this task</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <br>\n",
    "    <li>\n",
    "    <strong>Representation of results</strong>\n",
    "        <ul>\n",
    "    <li>You need to plot the performance of model both on train data and cross validation data for each hyper parameter, as shown in the figure\n",
    "    <img src='train_cv_auc.JPG' width=300px></li>\n",
    "    <li>Once you find the best hyper parameter, you need to train your model-M using the best hyper-param. Now, find the AUC on test data and plot the ROC curve on both train and test using model-M.\n",
    "    <img src='train_test_auc.JPG' width=300px></li>\n",
    "    <li>Along with plotting ROC curve, you need to print the <a href='https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/confusion-matrix-tpr-fpr-fnr-tnr-1/'>confusion matrix</a> with predicted and original labels of test data points\n",
    "    <img src='confusion_matrix.png' width=300px></li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <li><strong> [Task-2] </strong>\n",
    "        <ul>\n",
    "            <li>Select top 2000 features from feature <font color='red'>Set 2</font> using <a href='https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html'>`SelectKBest`</a>\n",
    "and then apply KNN on top of these features</li>\n",
    "            <li>\n",
    "                <pre>\n",
    "                from sklearn.datasets import load_digits\n",
    "                from sklearn.feature_selection import SelectKBest, chi2\n",
    "                X, y = load_digits(return_X_y=True)\n",
    "                X.shape\n",
    "                X_new = SelectKBest(chi2, k=20).fit_transform(X, y)\n",
    "                X_new.shape\n",
    "                ========\n",
    "                output:\n",
    "                (1797, 64)\n",
    "                (1797, 20)\n",
    "                </pre>\n",
    "            </li>\n",
    "            <li>Repeat the steps 2 and 3 on the data matrix after feature selection</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <br>\n",
    "    <li><strong>Conclusion</strong>\n",
    "        <ul>\n",
    "    <li>You need to summarize the results at the end of the notebook, summarize it in the table format. To print out a table please refer to this prettytable library<a href='http://zetcode.com/python/prettytable/'> link</a> \n",
    "        <img src='summary.JPG' width=400px>\n",
    "    </li>\n",
    "        </ul>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### note\n",
    "k- Nearest Neighbors(kNN) algorithm is one of the simplest,non-parametric,lazy classification learning algorithm. Its purpose is to use a database in which the data points are separated into several classes to predict the classification of a new sample point."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This algorithm is one of the more simple techniques used in machine learning. \n",
    "It is a method preferred by many in the industry because of its ease of use and \n",
    "low calculation time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://towardsdatascience.com/understanding-auc-roc-curve-68b2303cc9c5\n",
    "\n",
    "Note-\n",
    "\n",
    "When we need to check or visualize the performance of the multi - class classification problem, we use AUC (Area Under The Curve) ROC (Receiver Operating Characteristics) curve. It is one of the most important evaluation metrics for checking any classification model’s performance. It is also written as AUROC (Area Under the Receiver Operating Characteristics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 [Set 1] - Categorical, numerical features + project_title (BoW)+preprocessed_essays(BoW)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1 a) Find the best hyper parameter which results in the maximum AUC value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_predict(clf, data):\n",
    "    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "    # not the predicted outputs\n",
    "\n",
    "    y_data_pred = []\n",
    "    tr_loop = data.shape[0] - data.shape[0]%1000\n",
    "    # consider you X_tr shape is 49041, then your cr_loop will be 49041 - 49041%1000 = 49000\n",
    "    # in this for loop we will iterate unti the last 1000 multiplier\n",
    "    for i in range(0, tr_loop, 1000):\n",
    "        y_data_pred.extend(clf.predict_proba(data[i:i+1000])[:,1])\n",
    "    # we will be predicting for the last data points\n",
    "    y_data_pred.extend(clf.predict_proba(data[tr_loop:])[:,1])\n",
    "    \n",
    "    return y_data_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████| 14/14 [10:15<00:00, 44.25s/it]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\"\"\"\n",
    "y_true : array, shape = [n_samples] or [n_samples, n_classes]\n",
    "True binary labels or binary label indicators.\n",
    "y_score : array, shape = [n_samples] or [n_samples, n_classes]\n",
    "Target scores, can either be probability estimates of the positive class, confidence values, or no\n",
    "n-thresholded measure of\n",
    "decisions (as returned by “decision_function” on some classifiers).\n",
    "For binary y_true, y_score is supposed to be the score of the class with greater label.\n",
    "\"\"\"\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "a = []\n",
    "b = []\n",
    "\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 65, 71,85,91,101]\n",
    "for i in tqdm(K):\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    a.append(y_train_pred)\n",
    "    b.append(y_cv_pred)\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.1-b) Simple CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 10min 7s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "\n",
    "for i in K:\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_k_1 = 51"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1- c) Train the model for the best hyper parameter value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# https://scikitlearn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "neigh = KNeighborsClassifier(n_neighbors=best_k_1)\n",
    "neigh.fit(X_tr, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "y_train_pred = batch_predict(neigh, X_tr)\n",
    "y_test_pred = batch_predict(neigh, X_te)\n",
    "\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"True Positive Rate(TPR)\")\n",
    "plt.ylabel(\"False Positive Rate(FPR)\")\n",
    "plt.title(\"AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1-d Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(proba, threshould, fpr, tpr):\n",
    "    t = threshould[np.argmax(fpr*(1-tpr))]\n",
    "    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n",
    "    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n",
    "    predictions = []\n",
    "    for i in proba:\n",
    "        if i>=t:\n",
    "            predictions.append(1)\n",
    "        else:\n",
    "            predictions.append(0)\n",
    "    return predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24805741881815135 for threshold 0.824\n",
      "[[ 932  781]\n",
      " [3077 6432]]\n"
     ]
    }
   ],
   "source": [
    "#https://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html\n",
    "print(\"=\"*100)\n",
    "from sklearn.metrics import confusion_matrix\n",
    "print(\"Train confusion matrix\")\n",
    "print(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24805741881815135 for threshold 0.824\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_train = pd.DataFrame(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds,train_fpr, train_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b8b0bfac8>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_train, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### for test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Test confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24886046832937875 for threshold 0.843\n",
      "[[ 752  507]\n",
      " [3229 3762]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Test confusion matrix\")\n",
    "print(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24886046832937875 for threshold 0.843\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_test = pd.DataFrame(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b84111780>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_test, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 [Set 2] - Categorical, numerical features + project_title (TFIDF) +preprocessed_essays(TFIDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix\n",
      "(11222, 7596) (11222,)\n",
      "(5528, 7596) (5528,)\n",
      "(8250, 7596) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# merge two sparse matrices: https://stackoverflow.com/a/19710648/4084039\n",
    "from scipy.sparse import hstack\n",
    "X_tr = hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,teacher_prefix_categories_one_hot_train,project_grade_categories_one_hot_train,X_train_essay_tfidf,X_train_titles_tfidf,X_train_price_std,X_train_projects_std,X_train_qty_std)).tocsr()\n",
    "X_cv = hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,project_grade_categories_one_hot_cv,X_cv_essay_tfidf,X_cv_titles_tfidf,X_cv_price_std,X_cv_projects_std,X_cv_qty_std)).tocsr()\n",
    "X_te = hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,teacher_prefix_categories_one_hot_test,project_grade_categories_one_hot_test,X_test_essay_tfidf,X_test_titles_tfidf,X_test_price_std,X_test_projects_std,X_test_qty_std)).tocsr()\n",
    "\n",
    "print(\"Final Data matrix\")\n",
    "print(X_tr.shape, y_train.shape)\n",
    "print(X_cv.shape, y_cv.shape)\n",
    "print(X_te.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 a) Find the best hyper parameter which results in the maximum AUC value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████| 14/14 [09:37<00:00, 41.49s/it]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 9min 37s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "\n",
    "for i in tqdm(K):\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "    \n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    a.append(y_train_pred)\n",
    "    b.append(y_cv_pred)\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2-b)Simple CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 9min 28s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import roc_auc_score\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "\n",
    "for i in K:\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "n_neighbors=65"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2-c) Train the model for the best maximum AUC value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 47.5 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "\n",
    "neigh = KNeighborsClassifier(n_neighbors=65)\n",
    "neigh.fit(X_tr, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "y_train_pred = batch_predict(neigh, X_tr)    \n",
    "y_test_pred = batch_predict(neigh, X_te)\n",
    "\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2-d) Confusion Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### For Train Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.2491309034412509 for threshold 0.831\n",
      "[[ 806  907]\n",
      " [2673 6836]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Train confusion matrix\")\n",
    "print(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.2491309034412509 for threshold 0.831\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_train_1 = pd.DataFrame(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds,train_fpr, train_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b840b6668>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_train_1, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Test confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.249901424595967 for threshold 0.846\n",
      "[[ 642  617]\n",
      " [2674 4317]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Test confusion matrix\")\n",
    "print(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.249901424595967 for threshold 0.846\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_test_1 = pd.DataFrame(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b840f5f98>"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_test_1, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.3) [Set 3] : categorical, numerical features + project_title(AVG W2V) +preprocessed_essay (AVG W2V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix\n",
      "(11222, 701) (11222,)\n",
      "(5528, 701) (5528,)\n",
      "(8250, 701) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# merge two sparse matrices: https://stackoverflow.com/a/19710648/4084039\n",
    "from scipy.sparse import hstack\n",
    "X_tr = hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,teacher_prefix_categories_one_hot_train,project_grade_categories_one_hot_train,avg_w2v_vectors_train,avg_w2v_vectors_train_titles,X_train_price_std,X_train_projects_std,X_train_qty_std)).tocsr()\n",
    "X_cv = hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,project_grade_categories_one_hot_cv,avg_w2v_vectors_cv,avg_w2v_vectors_cv_titles,X_cv_price_std,X_cv_projects_std,X_cv_qty_std)).tocsr()\n",
    "X_te = hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,teacher_prefix_categories_one_hot_test,project_grade_categories_one_hot_test,avg_w2v_vectors_test,avg_w2v_vectors_test_titles,X_test_price_std,X_test_projects_std,X_test_qty_std)).tocsr()\n",
    "\n",
    "print(\"Final Data matrix\")\n",
    "print(X_tr.shape, y_train.shape)\n",
    "print(X_cv.shape, y_cv.shape)\n",
    "print(X_te.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3-a) Find the best hyper parameter which results in the maximum AUC value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████| 13/13 [1:30:37<00:00, 449.52s/it]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "for i in tqdm(K):\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "    \n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"AUC v/s K: hyperparameter Plot\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3-b) Simple-cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1h 33min 40s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "\n",
    "for i in K:\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "    \n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_k_3 = 65"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3- C) Train model using the best hyper-parameter value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 7min 49s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# https://scikitlearn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "neigh = KNeighborsClassifier(n_neighbors=best_k_3)\n",
    "neigh.fit(X_tr, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "y_train_pred = batch_predict(neigh, X_tr)\n",
    "y_test_pred = batch_predict(neigh, X_te)\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n",
    "plt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"True Positive Rate(TPR)\")\n",
    "plt.ylabel(\"False Positive Rate(FPR)\")\n",
    "plt.title(\"AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3-D)Confusion Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For Train Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24891211705140015 for threshold 0.831\n",
      "[[ 800  913]\n",
      " [2459 7050]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Train confusion matrix\")\n",
    "print(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24891211705140015 for threshold 0.831\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_train_2 = pd.DataFrame(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds,train_fpr, train_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b9988a828>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_train_2, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Test confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24995441873317514 for threshold 0.831\n",
      "[[ 495  764]\n",
      " [1827 5164]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Test confusion matrix\")\n",
    "print(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24995441873317514 for threshold 0.831\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_test_2 = pd.DataFrame(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b84123c50>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_test_2, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4) Set 4 : categorical, numerical features + project_title(TFIDF W2V) +preprocessed_essay (TFIDF W2V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix\n",
      "(11222, 701) (11222,)\n",
      "(5528, 701) (5528,)\n",
      "(8250, 701) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# merge two sparse matrices: https://stackoverflow.com/a/19710648/4084039\n",
    "from scipy.sparse import hstack\n",
    "X_tr = hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,teacher_prefix_categories_one_hot_train,project_grade_categories_one_hot_train,tfidf_w2v_vectors_train_essay,tfidf_w2v_vectors_train_titles,X_train_price_std,X_train_projects_std,X_train_qty_std)).tocsr()\n",
    "X_cv = hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,project_grade_categories_one_hot_cv,tfidf_w2v_vectors_cv_essay,tfidf_w2v_vectors_cv_titles,X_cv_price_std,X_cv_projects_std,X_cv_qty_std)).tocsr()\n",
    "X_te = hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,teacher_prefix_categories_one_hot_test,project_grade_categories_one_hot_test,tfidf_w2v_vectors_test_essay,tfidf_w2v_vectors_test_titles,X_test_price_std,X_test_projects_std,X_test_qty_std)).tocsr()\n",
    "\n",
    "print(\"Final Data matrix\")\n",
    "print(X_tr.shape, y_train.shape)\n",
    "print(X_cv.shape, y_cv.shape)\n",
    "print(X_te.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4-a) Find the best hyper paramter which results in the maximum AUC value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████| 13/13 [1:29:48<00:00, 410.56s/it]\n"
     ]
    },
    {
     "data": {
      "image/png": "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W29RREQEFRYWNlo9OVRqodPpaNGiRdSzZ08KCwujqVOn0p9//mnvaj2wr776ipRKpcWfqj/YnJwciouLo+DgYOrduzclJiaSXq+3c82to3qoEDlmW7/88kuKiYmhoKAgGjJkCO3evVuc5mjtvXPnDs2bN4+effZZCgsLozFjxtChQ4fE6Y7U3pqhQlS/9q1evZqeeeYZCgkJoXHjxtHp06cbtZ4CEVHjHQcxxhh7lPA1FcYYY1bDocIYY8xqOFQYY4xZDYcKY4wxq+FQYYwxZjUcKowxq+IOpY82DhVmUxMnTjQbvQ4wPhxvypQpCAgIQGpqar3X969//Qt+fn5NdjQ/R7N582Z88skn9q4GsyMOFWZ3arUaM2bMwNGjR7Fo0SLxYYis6fn8889RVFRk72owO+KnFDO7UqvVmD59OrKysrBs2TIMGDDA3lVijD0APlJhdlMVKMePH0dycrJZoGzZsgV+fn44cuRInes6ePAgRowYgeDgYPTr1w9r164Vp40cORKjRo0yW+a1117D8OHDARhPy73xxhtYuXIlevfujS5dumD69Om4evWqyTI3btzAnDlzEBkZidDQUEyYMAG//fabyTx+fn5YsWIFxowZg5CQECxcuFBsy/HjxzF8+HCEhIRgyJAhSE9PN1n29u3b+Oc//4no6Gh07twZERERmDVrlkk93nrrLbz00kv46KOP0LVrV8TExECj0dR72cmTJ+O7777DgAEDEBISgrFjx+LSpUs4cOAAhg0bJtbt0KFDJnW7ePEipk+fji5duiA8PBzTpk3DpUuXTNp9/fp17NixA35+fvVe7tq1a/Dz88O6deswZMgQhIaGYt26dbX+W7OHXKM+BIaxGiZMmEBjx46l8vJymjRpEgUFBVFGRobFeQsKCigzM5OKi4trXV9SUhIplUrq1asXbdiwgfbv30/Tp08npVJJv/zyCxERbdy4kZRKJV28eFFc7s6dO9S5c2dat26dWK/u3btTv379aPv27bR161Z65plnqG/fvqRSqYiI6Pbt29S3b1+Kjo6m7777jnbv3k2TJk2i4OBgOnXqlLhupVJJQUFBlJSURHv37qVTp05RamoqKZVKioyMpGXLltG+ffto1qxZpFQq6aeffiIi4xjzo0aNoujoaNq6dStlZGTQmjVrKCwsjF566SVx/XPnzqWgoCAaN24c/frr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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1h 29min 48s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "for i in tqdm(K):\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "    \n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"AUC v/s K: hyperparameter Plot\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.4-b)  Simple cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1h 32min 2s\n",
      "Wall time: 1h 32min 2s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "%%time\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91, 101]\n",
    "\n",
    "for i in K:\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "    \n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"ERROR PLOTS\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_k_4 = 71"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4-c) Train model using the best hyper-parameter value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 7min 13s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# https://scikitlearn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "neigh = KNeighborsClassifier(n_neighbors=best_k_4)\n",
    "neigh.fit(X_tr, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "y_train_pred = batch_predict(neigh, X_tr)\n",
    "y_test_pred = batch_predict(neigh, X_te)\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n",
    "plt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"True Positive Rate(TPR)\")\n",
    "plt.ylabel(\"False Positive Rate(FPR)\")\n",
    "plt.title(\"AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.4-d) Confusion Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Train Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.2487526279073968 for threshold 0.831\n",
      "[[ 796  917]\n",
      " [2470 7039]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Train confusion matrix\")\n",
    "print(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.2487526279073968 for threshold 0.831\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_train_3 = pd.DataFrame(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds,train_fpr, train_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b840f1be0>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_train_3, annot=True,annot_kws={\"size\": 16}, fmt='g')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Test confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24998091580177925 for threshold 0.845\n",
      "[[ 635  624]\n",
      " [2587 4404]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Test confusion matrix\")\n",
    "print(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24998091580177925 for threshold 0.845\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_test_3 = pd.DataFrame(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b840eb9e8>"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_test_3, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.5 Feature selection with `SelectKBest` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.sparse import hstack\n",
    "X_tr = hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,teacher_prefix_categories_one_hot_train,project_grade_categories_one_hot_train,X_train_essay_tfidf,X_train_titles_tfidf,X_train_price_std,X_train_projects_std,X_train_qty_std)).tocsr()\n",
    "X_cv = hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,project_grade_categories_one_hot_cv,X_cv_essay_tfidf,X_cv_titles_tfidf,X_cv_price_std,X_cv_projects_std,X_cv_qty_std)).tocsr()\n",
    "X_te = hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,teacher_prefix_categories_one_hot_test,project_grade_categories_one_hot_test,X_test_essay_tfidf,X_test_titles_tfidf,X_test_price_std,X_test_projects_std,X_test_qty_std)).tocsr()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.feature_selection import SelectKBest, chi2\n",
    "X_tr_new = SelectKBest(chi2, k=2000).fit_transform(X_tr, y_train)\n",
    "X_te_new = SelectKBest(chi2, k=2000).fit_transform(X_te, y_test)\n",
    "X_cv_new = SelectKBest(chi2, k=2000).fit_transform(X_cv, y_cv)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix\n",
      "(11222, 2000) (11222,)\n",
      "(5528, 2000) (5528,)\n",
      "(8250, 2000) (8250,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(\"Final Data matrix\")\n",
    "print(X_tr_new.shape, y_train.shape)\n",
    "print(X_cv_new.shape, y_cv.shape)\n",
    "print(X_te_new.shape, y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5-a) Find the best hyper parameter which results in the maximum AUC value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████| 12/12 [03:14<00:00, 16.26s/it]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_auc = []\n",
    "cv_auc = []\n",
    "\n",
    "K = [1, 5, 10, 15, 21, 31, 41, 51, 65, 71, 85, 91]\n",
    "\n",
    "for i in tqdm(K):\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr_new, y_train)\n",
    "\n",
    "    y_train_pred = batch_predict(neigh, X_tr_new)    \n",
    "    y_cv_pred = batch_predict(neigh, X_cv_new)\n",
    "\n",
    "    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "    # not the predicted outputs        \n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "\n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"AUC v/s K: hyperparameter Plot\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5-b) Simple-cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_auc = []\n",
    "cv_auc = []\n",
    "K = [1, 3, 5, 10, 15, 21, 31, 41, 51, 61, 71, 81, 91, 101]\n",
    "\n",
    "for i in K:\n",
    "    neigh = KNeighborsClassifier(n_neighbors=i)\n",
    "    neigh.fit(X_tr, y_train)\n",
    "    y_train_pred = batch_predict(neigh, X_tr)\n",
    "    y_cv_pred = batch_predict(neigh, X_cv)\n",
    "    \n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "    train_auc.append(roc_auc_score(y_train,y_train_pred))\n",
    "    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n",
    "    \n",
    "plt.plot(K, train_auc, label='Train AUC')\n",
    "plt.plot(K, cv_auc, label='CV AUC')\n",
    "plt.scatter(K, train_auc, label='Train AUC points')\n",
    "plt.scatter(K, cv_auc, label='CV AUC points')\n",
    "plt.legend()\n",
    "plt.xlabel(\"K: hyperparameter\")\n",
    "plt.ylabel(\"AUC\")\n",
    "plt.title(\"K: hyperparamters vs AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_k_5 = 85"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5-c) Train model using the best hyper-parameter value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "\n",
    "neigh = KNeighborsClassifier(n_neighbors=best_k_5)\n",
    "neigh.fit(X_tr_new, y_train)\n",
    "# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "# not the predicted outputs\n",
    "\n",
    "y_train_pred = batch_predict(neigh, X_tr_new)    \n",
    "y_test_pred = batch_predict(neigh, X_te_new)\n",
    "\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"True Positive Rate(TPR)\")\n",
    "plt.ylabel(\"False Positive Rate(FPR)\")\n",
    "plt.title(\"AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5-d) Confusion Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Train Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Train confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24825780261446329 for threshold 0.824\n",
      "[[ 785  928]\n",
      " [2497 7012]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Train confusion matrix\")\n",
    "print(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24825780261446329 for threshold 0.824\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_train_4 = pd.DataFrame(confusion_matrix(y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b8b0e1cf8>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_train_4, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n",
      "Test confusion matrix\n",
      "the maximum value of tpr*(1-fpr) 0.24924909200223838 for threshold 0.847\n",
      "[[ 595  664]\n",
      " [2699 4292]]\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*100)\n",
    "print(\"Test confusion matrix\")\n",
    "print(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.24924909200223838 for threshold 0.847\n"
     ]
    }
   ],
   "source": [
    "conf_matr_df_test_4 = pd.DataFrame(confusion_matrix(y_test, predict(y_test_pred, tr_thresholds, test_fpr, test_fpr)), range(2),range(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8b8ae3a9b0>"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(font_scale=1.4)#for label size\n",
    "sns.heatmap(conf_matr_df_test_4, annot=True,annot_kws={\"size\": 16}, fmt='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+----------+-----------------+------+\n",
      "| Vectorizer |  Model   | Hyper Parameter | AUC  |\n",
      "+------------+----------+-----------------+------+\n",
      "|    BOW     |  Brute   |        51       | 0.58 |\n",
      "|   TFIDF    |  Brute   |        65       | 0.59 |\n",
      "|  AVG W2V   |  Brute   |        65       | 0.59 |\n",
      "| TFIDF W2V  |  Brute   |        71       | 0.6  |\n",
      "|   TFIDF    | Top 2000 |        85       | 0.56 |\n",
      "+------------+----------+-----------------+------+\n"
     ]
    }
   ],
   "source": [
    "# Compare all your models using Prettytable library\n",
    "# http://zetcode.com/python/prettytable/\n",
    "\n",
    "from prettytable import PrettyTable\n",
    "\n",
    "#If you get a ModuleNotFoundError error , install prettytable using: pip3 install prettytable\n",
    "\n",
    "x = PrettyTable()\n",
    "x.field_names = [\"Vectorizer\", \"Model\", \"Hyper Parameter\", \"AUC\"]\n",
    "\n",
    "x.add_row([\"BOW\", \"Brute\", 51, 0.58])\n",
    "x.add_row([\"TFIDF\", \"Brute\", 65, 0.59])\n",
    "x.add_row([\"AVG W2V\", \"Brute\", 65, 0.59])\n",
    "x.add_row([\"TFIDF W2V\", \"Brute\", 71, 0.60])\n",
    "x.add_row([\"TFIDF\", \"Top 2000\", 85, 0.56])\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
